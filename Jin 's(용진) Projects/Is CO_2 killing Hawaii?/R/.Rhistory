plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.1, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.3, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(4,4) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.1, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.3, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
#===============================================================start
# Effect of different span on Kernel
k0.smooth <- spec.pgram(newdata, log='no', taper=0, pad=0, fast=FALSE, demean=TRUE, detrend=FALSE)
autoplot(k0.smooth, log = 'no', main = "Raw periodogram")
k1 <- kernel("daniell", c(1, 1))
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `c(1,1)` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "c(1,1)")
# Add other smooths
k2 <- kernel("daniell", c(2, 2))
smooth.df[, "c(2,2)"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("daniell", c(3, 3))
smooth.df[, "c(3,3)"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
k4 <- kernel("daniell", c(5, 5))
smooth.df[, "c(4,4)"] <- spec.pgram(newdata, kernel = k4, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df1 <- melt(smooth.df[,1:3], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df1)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df1)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot1, plot2)
smooth.df2 <- melt(smooth.df[,c(1,4:5)], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot3 <- ggplot(data = subset(smooth.df2)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot4 <- ggplot(data = subset(smooth.df2)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot3, plot4)
#===============================================================start
# Effect of different span on Kernel
k0.smooth <- spec.pgram(newdata, log='no', taper=0, pad=0, fast=FALSE, demean=TRUE, detrend=FALSE)
autoplot(k0.smooth, log = 'no', main = "Raw periodogram")
k1 <- kernel("daniell", c(1, 1))
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `c(1,1)` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "c(1,1)")
# Add other smooths
k2 <- kernel("daniell", c(3, 3))
smooth.df[, "c(2,2)"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("daniell", c(5, 5))
smooth.df[, "c(3,3)"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
k4 <- kernel("daniell", c(7, 7))
smooth.df[, "c(4,4)"] <- spec.pgram(newdata, kernel = k4, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df1 <- melt(smooth.df[,1:3], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df1)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df1)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot1, plot2)
smooth.df2 <- melt(smooth.df[,c(1,4:5)], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot3 <- ggplot(data = subset(smooth.df2)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot4 <- ggplot(data = subset(smooth.df2)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot3, plot4)
#===============================================================start
# Effect of different span on Kernel
k0.smooth <- spec.pgram(newdata, log='no', taper=0, pad=0, fast=FALSE, demean=TRUE, detrend=FALSE)
autoplot(k0.smooth, log = 'no', main = "Raw periodogram")
k1 <- kernel("daniell", c(1, 1))
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `c(1,1)` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "c(1,1)")
# Add other smooths
k2 <- kernel("daniell", c(3, 3))
smooth.df[, "c(3,3)"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("daniell", c(5, 5))
smooth.df[, "c(5,5)"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
k4 <- kernel("daniell", c(7, 7))
smooth.df[, "c(7,7)"] <- spec.pgram(newdata, kernel = k4, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df1 <- melt(smooth.df[,1:3], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df1)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df1)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot1, plot2)
smooth.df2 <- melt(smooth.df[,c(1,4:5)], variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot3 <- ggplot(data = subset(smooth.df2)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot4 <- ggplot(data = subset(smooth.df2)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency")
grid.arrange(plot3, plot4)
#===============================================================start
# Effect of different span(dimention) on Kernel
k1 <- kernel("daniell", c(3, 3, 3))
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `c(4,4,4)` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "c(4,4,4)")
# Add other smooths
k2 <- kernel("daniell", c(3,3))
smooth.df[, "c(4,4)"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("daniell", c(3))
smooth.df[, "c(4)"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df <- melt(smooth.df, variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
#===============================================================start
# Effect of different span(dimention) on Kernel
k1 <- kernel("daniell", c(3, 3, 3))
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `c(4,4,4)` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "c(3,3,3)")
# Add other smooths
k2 <- kernel("daniell", c(3,3))
smooth.df[, "c(3,3)"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("daniell", c(3))
smooth.df[, "c(3)"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df <- melt(smooth.df, variable.name = "dimension",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = dimension)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df)) +
geom_path(aes(x = frequency, y = spectrum, color = dimension)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
#Effect of different kernel
k1 <- kernel("daniell", 3, 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, log = 'no', taper = 0, plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `daniell` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "daniell")
# Add other smooths kernel
k2 <- kernel("dirichlet", 3, 6)   # Q : NaN ???
smooth.df[, "dirichlet"] <- spec.pgram(newdata, kernel = k2, log = 'no', taper = 0, plot = FALSE)$spec
k3 <- kernel("fejer", 3, 6)
smooth.df[, "fejer"] <- spec.pgram(newdata, kernel = k3, log = 'no', taper = 0, plot = FALSE)$spec
k4 <- kernel("modified.daniell", 3, 6)
smooth.df[, "modi.daniell"] <- spec.pgram(newdata, kernel = k4, log = 'no', taper = 0, plot = FALSE)$spec
# Melt dataframe in order to plot three graph together
smooth.df <- melt(smooth.df, variable.name = "kernel",
id.vars = "frequency", value.name = "spectrum")
which(is.nan(smooth.df[,3]))
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = kernel)) +  scale_x_continuous("Period (years)")
plot2 <- ggplot(data = subset(smooth.df)) +
geom_path(aes(x = frequency, y = spectrum, color = kernel)) +
scale_x_continuous("Period (years)") +  scale_y_log10() +
labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.1, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.3, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.05, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.2, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "5%"] <- spec.pgram(newdata, kernel = k1, taper = 0.05, log = 'no', plot = FALSE)$spec
smooth.df[, "20%"] <- spec.pgram(newdata, kernel = k1, taper = 0.2, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.1, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.2, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
# Effect of different tapering - less important the longer your time series is, but it can be very important in short series
#Besides windowing, there is one other 'trick' commonly done when spectral estimating, called tapering. Before describing tapering, let's discuss the problem.When you estimate a periodogram, you are implicitly making the assumption that your time series is circular, i.e. that you could wrap the time series around and just keep time marching on until infinity. Obviously, this isn't so. If you wrap the time series around, there will be a jump where the end meets the start again. This jump is spurious, but it will propagate itself through all the frequencies, contaminating them. The solution is to downweight the beginning and end of the data. This way, when you calculate the periodogram, you'll be giving more weight to the middle, and less weight to the ends. There is still the jump at the end, but it has very little weight, so it's effect is diminished. This downweighting is called tapering. But how much do you downweight? 5% at each end? 10%? 50% (i.e. the whole thing)?
k1 <- kernel("modified.daniell", c(3,3) , 6)
k1.smooth <- spec.pgram(newdata, kernel = k1, taper = 0, log = 'no', plot = FALSE)
smooth.df <- data.frame(freq = k1.smooth$freq, `0%` = k1.smooth$spec)
names(smooth.df) <- c("frequency", "0%")
# Add other tapers
smooth.df[, "10%"] <- spec.pgram(newdata, kernel = k1, taper = 0.1, log = 'no', plot = FALSE)$spec
smooth.df[, "30%"] <- spec.pgram(newdata, kernel = k1, taper = 0.3, log = 'no',  plot = FALSE)$spec
smooth.df <- melt(smooth.df, variable.name = "taper",
id.vars = "frequency", value.name = "spectrum")
plot1 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)")
# +  scale_y_log10()
plot2 <- ggplot(data = subset(smooth.df)) + geom_path(aes(x = frequency, y = spectrum, color = taper)) + scale_x_continuous("Period (years)") + scale_y_log10() + labs(title = "log spacing on frequency & spectrum")
grid.arrange(plot1, plot2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(4, 4)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.2)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(5, 5)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
final
plot(final)
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
final_ar
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
plot(hawaii)
data(beersales)
plot(beersales)
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
pi
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
top_freq
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii, t, periodic_terms)
knitr::opts_chunk$set(echo = TRUE)
n <- 20
omega_true <- 0.2
pgram1 <- function(omega) {
n * (abs(omega - omega_true) < 1e-6)
}
omega <- seq(1/n, 0.5, by=1/n)
plot(omega, pgram1(omega), type="l")
n <- 23
pgram2 <- function(omega) {
1/n * (sin(n * pi * (omega - omega_true))/sin(pi * (omega - omega_true)))^2
}
omega <- seq(1/n, 0.5, by=1/n)
lines(omega, pgram2(omega), type="l", lty=2)
curve(pgram2, from=0, to=0.5, n=1000)
library(TSA)
data(beersales)
plot.ts(beersales)
t <- 1:length(beersales)
fit <- lm(beersales ~ t)
beersales_detrended <- fit$residuals
plot.ts(beersales_detrended)
spec.pgram(beersales_detrended, taper=0)
spec.pgram(beersales_detrended, kernel("daniell", 1), taper=0)
spec.pgram(beersales_detrended, kernel("daniell", 2), taper=0)
spec.pgram(beersales_detrended, kernel("daniell", 3), taper=0)
spec.pgram(beersales_detrended, kernel("daniell", 4), taper=0)
spec.pgram(beersales_detrended, kernel("modified.daniell", 1), taper=0)
spec.pgram(beersales_detrended, kernel("modified.daniell", 1), taper=0.2)
pgram <- spec.pgram(beersales_detrended, kernel("modified.daniell", c(1, 1, 1)), taper=0.2)
key_freq_ind <- c(1, which(diff(sign(diff(pgram$spec)))==-2) + 1)
key_freq <- pgram$freq[key_freq_ind]
abline(v=key_freq, lty=2)
spec.pgram(beersales_detrended, kernel("modified.daniell", c(1, 1, 1)), taper=0.2)
pgram_ar <- spec.ar(beersales_detrended, plot=F)
lines(pgram_ar$freq, pgram_ar$spec, lty=2, col="red")
top_freq <- key_freq[order(pgram$spec[key_freq_ind], decreasing = T)][1:3]
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(beersales, t, periodic_terms)
fit_final <- lm(beersales ~ ., df)
plot(t, beersales, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
length(hawaii)
head(hawaii)
length(hawaii[,2])
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
#pick the key frequencies
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
# compare with the parametric spectral estimator
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
# pick top three frequencies and use these to generate features in terms of sin and cos functions.
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii, t, periodic_terms)
fit_final <- lm(hawaii ~ ., df)
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii, t, periodic_terms)
df
fit_final <- lm(hawaii ~ ., df)
head(beersales)
head(hawaii)
df
df
View(df)
head(beersales)
df <- data.frame(beersales, t, periodic_terms)
head(beersales,20)
hawaii
df <- data.frame(hawaii[,2], t, periodic_terms)
df
head(hawaii)
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
df
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
plot(t, hawaii, type="l")
plot(t, hawaii$Carbondioxide, type="l")
plot(t, hawaii$Carbondioxide, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
#pick the key frequencies
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
# compare with the parametric spectral estimator
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
# pick top three frequencies and use these to generate features in terms of sin and cos functions.
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
plot(t, hawaii$Carbondioxide, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
top_freq
#pick the key frequencies
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
# compare with the parametric spectral estimator
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
# pick top three frequencies and use these to generate features in terms of sin and cos functions.
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
top_freq
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
plot(t, hawaii$Carbondioxide, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
#pick the key frequencies
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
# compare with the parametric spectral estimator
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
# pick top three frequencies and use these to generate features in terms of sin and cos functions.
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:4]
top_freq
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
plot(t, hawaii$Carbondioxide, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
#pick the key frequencies
final <- spec.pgram(newdata, kernel("modified.daniell", c(3, 3)),
taper=0.1)
key_freq_ind <- c(1, which(diff(sign(diff(final$spec)))==-2) + 1)
key_freq <- final$freq[key_freq_ind]
abline(v=key_freq, lty=2)
# compare with the parametric spectral estimator
plot(final)
final_ar <- spec.ar(newdata, plot=F)
lines(final_ar$freq, final_ar$spec, lty=2, col="red")
# pick top three frequencies and use these to generate features in terms of sin and cos functions.
t <- 1:length(hawaii[,2])
top_freq <- key_freq[order(final$spec[key_freq_ind], decreasing = T)][1:3]
top_freq
periodic_terms <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t), sin(2 * pi * freq * t))
}))
df <- data.frame(hawaii$Carbondioxide, t, periodic_terms)
fit_final <- lm(hawaii.Carbondioxide ~ ., df)
plot(t, hawaii$Carbondioxide, type="l")
lines(t, fit_final$fitted.values, lty=2, col="red")
?spec.ar
