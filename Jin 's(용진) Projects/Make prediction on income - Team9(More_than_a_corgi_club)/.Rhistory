train <- train[,-7]
sqrtfare <- sqrt(test$Fare)
test$sqrtfare <- sqrtfare
test <- test[,-6]
plot(train)
plot(test)
?pairs
library(grphics)
knitr::opts_chunk$set(echo = TRUE)
library(glmnet, warn.conflicts = T)
library(bestglm, warn.conflicts = T) #variable selection package...
library(leaps, warn.conflicts = T) #regsubsets...
library(stats, warn.conflicts = T) #predict function...
library(DAAG) #frogs and spam7 data...
library(base)
library(dplyr)
pairs(train)
?cooks.distance
cooks.distance(train)
cooks.distance(train[,1])
str(train)
cooks.distance(train[,c(2,4,5,6,8)])
cooks.distance(train[,2])
?glm
glm(Survived ~., data = train, family = binomial)
glmoriginal <- glm(Survived ~., data = train, family = binomial)
glmoriginal$aic
glmoriginal
?bestglm
bestglm(train, family = binomial, IC = "AIC", TopModels = 10)
Xy <- c(train[,-1], train[,1])
Xy <- data.frame(train[,-1], train[,1])
View(Xy)
Xy <- data.frame(train[,-1], Survived = train[,1])
Xy <- data.frame(train[,-1], Survived = train[,1])
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
bestglm(Xy, family = binomial, IC = "AIC")
str(Xy)
glmoriginal <- glm(Survived ~., data = train, family = binomial)
glmoriginal$aic
glmoriginal
Xy <- data.frame(train[,-1], Survived = train[,1])
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
str(Xy)
Xy <- data.frame(train[,-1], Survived = as.numeric(train[,1]))
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
str(Xy)
Xy <- data.frame(train[,-1], Survived = as.numeric(train[,1]) - 1)
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
Xy <- data.frame(train[,-1], Survived = as.factor(as.numeric(train[,1]) - 1))
str(Xy)
str(Xy)$Survied
levels(Xy$Survived)
Xy$Survived
as.numeric(train[,1]) - 1
as.factor(as.numeric(train[,1]) - 1)
Xy <- data.frame(train[,-1], Survived = as.factor(as.numeric(train[,1]) - 1))
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
empty <- c()
for(i in 1:ncol(train)){
empty[i] <- sum(train[,i] == "")
}
empty
Xy <- data.frame(train[,-1], Survived = as.factor(as.numeric(train[,1]))-1)
Xy$Survived
Xy <- data.frame(train[,-1], Survived = as.factor(as.numeric(train[,1])))
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
Xy$Survived
Xy <- data.frame(train[,-1], Survived = as.factor(as.numeric(train[,1]) - 1))
Xy$Survived
Xy$Pclass
Sy$Sex
Xy$Sex
Xy$Embarked
Xy <- data.frame(train[,-1], Survived = as.numeric(train[,1]) - 1)
Xy
bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
aic1 <- bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
aic1$BestModels
bic1 <- bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
bic1$BestModel
bic1$BestModels
aic1$BestModel
bic1$BestModel
cv1 <- bestglm(Xy, family = binomial, IC = "CV", TopModels = 10)
cv1 <- bestglm(Xy, family = binomial, IC = "LOOCV", TopModels = 10)
?regsubsets
lsa(aic1)
?lsa
??lsa
install.packages("lsa")
library(lsa)
lsa(bic1)
?lsa
bic1$BestModel
aic1$BestModel
bic1 <- bestglm(Xy, family = binomial, IC = "BIC", TopModels = 10)
bic1 <- bestglm(Xy, family = binomial, IC = "BIC", TopModels = 10)
bic1$BestModels
bic1$BestModel
Xy <- data.frame(train[,-1], Survived = as.numeric(train[,1]) - 1)
aic1 <- bestglm(Xy, family = binomial, IC = "AIC", TopModels = 10)
aic1$BestModel
a
bic1 <- bestglm(Xy, family = binomial, IC = "BIC", TopModels = 10)
bic1$BestModel
glmoriginal
names(train)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + Embarked + sqrtfare, data = train, family = binomial)
glm(Survived ~ Pclass + SibSp + Parch + Embarked + sqrtfare, data = train, family = binomial)
glm(Survived ~ Pclass + SibSp + Parch + Embarked + sqrtfare, data = train, family = binomial)
str(train)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex:Age, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Sex*sqrtfare, data = train, family = binomial)
glmoriginal
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked*Sex, data = train, family = binomial)
cor(train)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Sex*Pclass, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch + Sex*SibSp, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch + Sex*SibSp, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*SibSp, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
sexage <- sex * age
sexage <- train$sex * train$age
sexage
sexage <- train$sex * train$Age
sexage
sexage <- train$Sex * train$Age
train$Sex
as.numeric(train$Sex)
as.numeric(train$Sex) - 1
sexage <- (as.numeric(train$Sex) - 1) * train$Age
sexage
sexpclass <- (as.numeric(train$Sex) - 1) * train$Pclass
sexpclass
sexparch <- c()
sexparch <- (as.numeric(train$Sex) - 1) * train$Parch
Xynew <- data.frame(train[,-1], sexage = sexage, sexpclass = sexpclass, sexparch = sexparch,
Survived = as.numeric(train[,1]) - 1)
View(Xynew)
glm(Survived~., family = binomial)
glm(Survived~., data = Xynew, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age, data = train, family = binomial)
glm(Survived ~ Pclass + SibSp + Parch + Embarked + sqrtfare, data = train, family = binomial)
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare, data = train, family = binomial)
glm(Survived~., data = Xynew, family = binomial)
aic2 <- bestglm(Xynew, family = binomial, IC = "AIC", TopModels = 10)
aic2$BestModel
bic1 <- bestglm(Xy, family = binomial, IC = "BIC", TopModels = 10)
bic1$BestModel
aic2$BestModels
bic1$BestModels
bic1 <- bestglm(Xynew, family = binomial, IC = "BIC", TopModels = 10)
bic1$BestModel
glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + sqrtfare + Sex*Age + Embarked + Sex*Pclass + Sex*Parch, data = train, family = binomial)
glm(Survived~., data = Xynew, family = binomial)
aic2$BestModel
bic1$BestModel
library(ROCR)
aic2$BestModels
bic1$BestModel
bic1$BestModels
aicmodel <- Xynew[,c(1,2,3,4,5,9,10)]
bic1$BestModels
bic1$BestModels
aic2$BestModels
aicmodel <- Xynew[,c(1,2,3,4,5,9,10)]
bicmodel <- Xynew[,c(1,2,3,4,9)]
bic1$BestModel
?predict.glm
glmnew <- glm(Survived~., data = Xynew, family = binomial)
glmnew
predict(glmnew, Xynew[,-11])
predict(glmnew, Xynew[,-11])$posterior
predict(glmnew, Xynew[,-11])
pr <- predict(glmnew, Xynew[,-11])
pr$clas
pr$class
predict(glmnew, Xynew[,-11], type = "response")
predict(glmnew, Xynew[,-11], type = "link")
predict(glmnew, Xynew[,-11], type = "terms")
predict(glmnew, Xynew[,-11], type = "response")
nrow(train)
predict(glmnew, Xynew[,-11], type = "link")
predict(glmnew, Xynew[,-11], type = "terms")
predict(glmnew, Xynew[,-11], type = "response")
predict(glmnew, Xynew[,-11], type = "response"), Xynew[,11]
prediction(predict(glmnew, Xynew[,-11], type = "response"), Xynew[,11])
predicting <- prediction(predict(glmnew, Xynew[,-11], type = "response"), Xynew[,11])
roc <- performance(predicting, measure = "tpr", x.measure = "fpr")
plot(roc)
plot(roc, main = "ROC with original model")
performance(predicting, measure = "auc")
performance(predicting, measure = "auc")@y.values
bic1$BestModel
predicting2 <- prediction(predict(aic2$BestModel, aicmodel, type = "response"), Xynew[,11])
roc <- performance(predicting2, measure = "tpr", x.measure = "fpr")
roc2 <- performance(predicting2, measure = "tpr", x.measure = "fpr")
plot(roc2, main = "ROC with AIC model")
performance(predicting, measure = "auc")@y.values #AUC
predicting <- prediction(predict(glmnew, Xynew[,-11], type = "response"), Xynew[,11])
roc <- performance(predicting, measure = "tpr", x.measure = "fpr")
plot(roc, main = "ROC with original model")
performance(predicting, measure = "auc")@y.values #AUC
predicting2 <- prediction(predict(aic2$BestModel, aicmodel, type = "response"), Xynew[,11])
roc2 <- performance(predicting2, measure = "tpr", x.measure = "fpr")
plot(roc2, main = "ROC with AIC model")
performance(predicting, measure = "auc")@y.values #AUC
performance(predicting2, measure = "auc")@y.values #AUC
predicting3 <- prediction(predict(bic1$BestModel, bicmodel, type = "response"), Xynew[,11])
roc3 <- performance(predicting3, measure = "tpr", x.measure = "fpr")
plot(roc3, main = "ROC with BIC model")
performance(predicting3, measure = "auc")@y.values #AUC
threshholds <- seq(from = 0.001, 0.999, 0.002)
thresholds <- seq(from = 0.001, 0.999, 0.002)
thresholds
predict(glmnew, Xynew[,-11], type = "response")
length(thresholds)
error <- c()
?ifelse
thresholds <- seq(from = 0.001, 0.999, 0.001)
error <- c()
ifelse(predict(glmnew, Xynew[,-11], type = "response") > (0.001 * i), 1, 0)
class(ifelse(predict(glmnew, Xynew[,-11], type = "response") > (0.001 * i), 1, 0))
pr <- c()
thresholds <- seq(from = 0.001, 0.999, 0.001)
error <- c()
for(i in 1:length(thresholds)){
pr <- c()
pr <- ifelse(predict(glmnew, Xynew[,-11], type = "response") > (0.001 * i), 1, 0)
error[i] <- mean(pr != Xynew[,11])
}
error
error2 <- c() #misclassfication for AIC
for(i in 1:length(thresholds)){
pr <- c()
pr <- ifelse(predict(aic2$BestModel, aicmodel, type = "response") > (0.001 * i), 1, 0)
error2[i] <- mean(pr != Xynew[,11])
}
error3 <- c() #misclassfication for BIC
for(i in 1:length(thresholds)){
pr <- c()
pr <- ifelse(predict(bic1$BestModel, bicmodel, type = "response") > (0.001 * i), 1, 0)
error3[i] <- mean(pr != Xynew[,11])
}
par(mfrow=c(1,3))
par(mfrow=c(1,3))
plot(error, threshholds)
par(mfrow=c(1,3))
plot(error, thresholds)
plot(error2, threshholds)
par(mfrow=c(1,3))
plot(error, thresholds)
plot(error2, thresholds)
plot(error3, thresholds)
par(mfrow=c(1,3))
plot(thresholds, error)
plot(thresholds, error2)
plot(thresholds, error3)
which.min(error)
performance(predicting, measure = "auc")@y.values
performance(predicting, measure = "auc")@y.values[[1]]
paste("Minimum misclassification rate for original model is", min(error), "at thresholds",
which.min(error)*0.001, "and average rate is", mean(error), "and AUC is",
performance(predicting, measure = "auc")@y.values[[1]])
paste("Minimum misclassification rate for AIC model is", min(error2), "at thresholds",
which.min(error2)*0.001, "and average rate is", mean(error2), "and AUC is",
performance(predicting2, measure = "auc")@y.values[[1]])
paste("Minimum misclassification rate for BIC model is", min(erro3), "at thresholds",
which.min(error3)*0.001, "and average rate is", mean(error3), "and AUC is",
performance(predicting3, measure = "auc")@y.values[[1]])
paste("Minimum misclassification rate for original model is", min(error), "at thresholds",
which.min(error)*0.001, "and average rate is", mean(error), "and AUC is",
performance(predicting, measure = "auc")@y.values[[1]])
paste("Minimum misclassification rate for AIC model is", min(error2), "at thresholds",
which.min(error2)*0.001, "and average rate is", mean(error2), "and AUC is",
performance(predicting2, measure = "auc")@y.values[[1]])
paste("Minimum misclassification rate for BIC model is", min(error3), "at thresholds",
which.min(error3)*0.001, "and average rate is", mean(error3), "and AUC is",
performance(predicting3, measure = "auc")@y.values[[1]])
glmnew
predict(glmnew, Xynew[,-11], type = "response")
sexage <- c() #let male becomes 1 and women becomes 0
sexage <- (as.numeric(test$Sex) - 1) * test$Age
sexpclass <- c()
sexpclass <- (as.numeric(test$Sex) - 1) * test$Pclass
sexparch <- c()
sexparch <- (as.numeric(test$Sex) - 1) * test$Parch
newtest <- data.frame(test, sexage = sexage, sexpclass = sexpclass, sexparch = sexparch)
View(newtest)
predict(glmnew, newtest, type = "response")
conclusion <- c()
conclusion <- ifelse(predict(glmnew, newtest, type = "response") > which.min(error)*0.001, 1, 0)
conclusion
nrow(train)
?seq
nrow(test)
seq(nrow(train) + 1, nrow(train) + nrow(test), 1)
?write.csv
answerbarca <- data.frame(PassengerId = seq(nrow(train) + 1, nrow(train) + nrow(test), 1),
Survived = conclusion)
View(answerbarca)
write.csv(answerbarca, file = "JinKweon.csv", row.names = F, col.names = T)
head(answerbarca)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("~/Desktop/Cal/2017 Fall/Stat 154/project")
getwd()
getwd()
getwd()
getwd()
install.packages("rpart")
library(rpart)
read.table("/data/rawdata/adult.data.txt")
read.table("data/rawdata/adult.data.txt")
getwd()
setwd("~/Desktop/Cal/2017 Fall/Stat 154/project")
trainread.table("~/data/rawdata/adult.data.txt")
train <- read.table("~/data/rawdata/adult.data.txt")
getwd()
read.table("/data/rawdata/adult.data.txt")
read.table("data/rawdata/adult.data.txt")
getwd()
train <- read.table("../data/rawdata/adult.data.txt")
test <- read.table("../data/rawdata/adult.test.txt")
View(train)
View(test)
train <- read.table("../data/rawdata/adult.data.txt", sep = ",")
test <- read.table("../data/rawdata/adult.test.txt", sep = ",")
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
train <- read.table("../data/rawdata/adult.data.txt", sep = ",")
test <- read.table("../data/rawdata/adult.test.txt", sep = ",")
dim(train)
dim(train)
dim(test)
colnames(train) <- c("age", "workclass", "fnlwgt", "education", "education-num",
"marital-status", "occupation", "relationship", "race", "sex",
"capital-gain", "capital-loss", "hours-per-week", "native-country", "income")
colnames(test) <- c("age", "workclass", "fnlwgt", "education", "education-num",
"marital-status", "occupation", "relationship", "race", "sex",
"capital-gain", "capital-loss", "hours-per-week", "native-country", "income")
for(i in 1:ncol(train)){
cat("names of NA rows of", colnames(train)[i], "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA :  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
cat("names of rows contain missing values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
}
empty <- c()
for(i in 1:ncol(train)){
empty[i] <- sum(train[,i] == "")
}
empty
na <- c()
for(i in 1:ncol(train)){
na[i] <- sum(is.na(train[,i]))
}
na
dim(train)
dim(test)
for(i in 1:ncol(train)){
cat("names of NA rows of", colnames(train)[i], "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA :  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
cat("names of rows contain missing values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
cat("names of rows contain ? values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == "?"),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == "?"),])), "\n")
print("======================================")
}
train$`native-country` == "?"
train$`native-country`
train$`native-country`[15]
train$`native-country`[15] == ?
d
train$`native-country`[15] == "?"
train$`native-country`[15] == "? "
train$`native-country`[15] == " ? "
train$`native-country`[15] == " "
train$`native-country`[15] == ""
as.character(train$`native-country`)
as.character(train$`native-country`) = "?"
as.character(train$`native-country`) == "?"
as.character(train$`native-country`) == " ?"
?read.table
train <- read.table("../data/rawdata/adult.data.txt", sep = ",", na.strings = "NA")
class(train$V14)
train <- read.table("../data/rawdata/adult.data.txt", sep = ",", na.strings = "?")
as.character(train$`native-country`) == " ?"
as.character(train$V14) == " ?"
train <- read.table("../data/rawdata/adult.data.txt", sep = ",")
dim(train)
colnames(train) <- c("age", "workclass", "fnlwgt", "education", "education-num",
"marital-status", "occupation", "relationship", "race", "sex",
"capital-gain", "capital-loss", "hours-per-week", "native-country", "income")
for(i in 1:ncol(train)){
cat("names of NA rows of", colnames(train)[i], "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA :  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
cat("names of rows contain missing values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
cat("names of rows contain ? values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == " ?"),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == " ?"),])), "\n")
print("======================================")
}
for(i in 1:ncol(train)){
cat("names of NA rows of", colnames(train)[i], "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA :  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
print("======================================")
cat("names of rows contain missing values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
print("======================================")
cat("names of rows contain ? values ", colnames(train)[i], "\n")
cat(rownames(train[which(train[,i] == " ?"),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == " ?"),])), "\n")
print("======================================")
print("======================================")
}
for(i in 1:ncol(train)){
cat("<names of NA rows of", colnames(train)[i], ">", "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA values:  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
print("======================================")
cat("<names of rows contain missing values ", colnames(train)[i], ">", "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
print("======================================")
cat("<names of rows contain ? values ", colnames(train)[i], ">", "\n")
cat(rownames(train[which(train[,i] == " ?"),]), "\n")
cat("Number of ? values :  ", length(rownames(train[which(train[,i] == " ?"),])), "\n")
print("======================================")
print("======================================")
}
for(i in 1:ncol(train)){
cat("<names of NA rows in", colnames(train)[i], "variable>", "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA values:  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
print("======================================")
cat("<names of rows contain missing values in", colnames(train)[i], "variable>", "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
print("======================================")
cat("<names of rows contain ? values in", colnames(train)[i], "variable>", "\n")
cat(rownames(train[which(train[,i] == " ?"),]), "\n")
cat("Number of ? values :  ", length(rownames(train[which(train[,i] == " ?"),])), "\n")
print("======================================")
print("======================================")
}
train$`marital-status` == " ?"
train$`native-country` == " ?"
for(i in 1:ncol(train)){
cat("<names of NA rows in", colnames(train)[i], "variable>", "\n")
cat(rownames(train)[is.na(train[,i])], "\n")
cat("Number of NA values:  ", length(rownames(train)[is.na(train[,i])]),"\n")
print("======================================")
print("======================================")
cat("<names of rows contain missing values in", colnames(train)[i], "variable>", "\n")
cat(rownames(train[which(train[,i] == ""),]), "\n")
cat("Number of Missing values :  ", length(rownames(train[which(train[,i] == ""),])), "\n")
print("======================================")
print("======================================")
cat("<names of rows contain ? values in", colnames(train)[i], "variable>", "\n")
cat(rownames(train[which(train[,i] == " ?"),]), "\n")
cat("Number of ? values :  ", length(rownames(train[which(train[,i] == " ?"),])), "\n")
print("======================================")
print("======================================")
}
train$age == " ?"
sum(train$age == " ?")
sum(train$workclass == " ?")
getwd()
install.packages("C50")
library("C50", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
